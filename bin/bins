#!/usr/bin/python3

import argparse
import requests
import yaml
import json
import logging
import ssl
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler

def load_config(filepath):

    with open(filepath, 'r') as file:
        config = yaml.safe_load(file)

    return config

def get_address_id(url, address):

    params = { 'postCode': address['postcode'] }
    tcp_response = requests.get(url=url, params=params, timeout=10)
    response = json.loads(tcp_response.text)

    for address_resp in response:
        if address_resp.get('street') == address['street'].upper() and address_resp.get('houseNumber') == address['number']:
            return address_resp['id']


def get_bin_dates(url, lookahead=12):

    params = {'numberOfCollections': lookahead}
    tcp_response = requests.get(url=url, params=params, timeout=10)
    response = json.loads(tcp_response.text)

    return response['collections']

def generate_bin_rota (new_bin_dates, config):
    rooms = config['rooms']

    logging.info('loading historic data...')
    with open(config['data_file'], 'r') as file:
        bin_data = json.load(file)
    
    logging.info('processing data...')
    earliest_new_date = min( item['date'] for item in new_bin_dates )
    bin_data = [ entry for entry in bin_data if entry['date'] < earliest_new_date ] 

    last_room = bin_data[-1]['room']
    last_room_index = rooms.index(last_room)

    for bin_date in new_bin_dates:
        is_valid = set(bin_date['roundTypes']).intersection(config['valid_bins'])
        if not bin_date.get('room') and is_valid:
            last_room_index += 1
            bin_date['room'] = rooms[last_room_index%len(rooms)]
            bin_date['roundTypes'] = list(is_valid)
            bin_data.append(bin_date)

    bin_data = sorted(bin_data, key=lambda x:x['date'])

    logging.info('writing data to file...')
    with open(config['data_file'], 'w') as file:
        json.dump(bin_data, file)

    return bin_data
        

class BinHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        if self.path == '/':

            logging.info('request recieved')
            try:
                response = get_bin_html(self.config)
                self.send_response(200)
            except Exception as exception:
                response = 'internal server error'
                logging.exception('internal server error, %s', exception)
                self.send_response(500)

            logging.info('sending response')

            self.protocol_version = 'HTTP/1.0'
            self.send_header("Content-type", "text/html")
            self.end_headers()
            response_bytes = response.encode()
            self.send_header("Content-length", response_bytes)

            self.wfile.write(response_bytes)

def get_bin_html(config):
    address_api_url = config['gov_api_address_url'] 
    collection_api_url = config['gov_api_collection_url'] 

    logging.info('fetching address id...')
    address_id = get_address_id(address_api_url, config['address'])
    if not address_id:
        logging.error('error, no address id returned')
        return

    collection_api_url += f'/{address_id}'

    logging.info('fetching bin json...')
    new_bin_dates = get_bin_dates(collection_api_url, config['lookahead'])

    bin_rota = generate_bin_rota(new_bin_dates, config)
    bin_elements = ''
    logging.info('generating html...')
    for item in bin_rota:
        slipped_str = ' (moved) ' if item['slippedCollection'] else ''
        date_pretty = datetime.strptime(item['date'],'%Y-%m-%dT%H:%M:%SZ').strftime('%d-%b')
        elems = ''.join([ f'<td class="{round_type.lower()}">{round_type.title()}</td>' for round_type in item['roundTypes'] ])
        bin_elements += f'<tr><td>{date_pretty}</td>{elems}<td>Room {item["room"].title()} {slipped_str}</td></tr>'
        
    logging.info('loading css...')
    with open(config['style_path'], 'r') as file:
        css = file.read()

    html = f'''
<!DOCTYPE html>
<html>
<head>
<title>Bin Dates</title>
<style>
{css}
</style>
</head>
<body class="background" >

<h1 class="heading">Bin Rota</h1>
<br>
<table class="main-body">
{bin_elements}
</table>

</body>
</html> 
'''
    return(html)

def run_server(server_class, handler_class, config):
    server_address = ('', config['server_port'])
    httpd = server_class(server_address, handler_class)
    httpd.RequestHandlerClass.config = config
    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    ssl_context.load_cert_chain(certfile=config['cert_file'], keyfile=config['privkey_file'])
    httpd.socket = ssl_context.wrap_socket(httpd.socket, server_side=True)

    httpd.serve_forever()


parser = argparse.ArgumentParser(description='Get data of bin dates from location, input a config file')
parser.add_argument('config_path')
args = parser.parse_args()

config_opts = load_config(args.config_path)

logging.basicConfig(filename=config_opts['log_path'], format='%(asctime)s - %(message)s', level=logging.INFO)
logging.info('loaded config')

run_server(HTTPServer, BinHandler, config_opts)
